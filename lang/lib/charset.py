# Mapping from LCD source encoding to unicode characters
CUSTOM_CHARS = {
    '\x06': '‚è¨',
    '\x04': 'üîÉ',
    '\xdf': '¬∞',
    '\xe1': '√§',
    '\xe4': '¬µ', #on keyboard AltGr+m it is \xC2\xB5
    '\xef': '√∂',
    '\xf5': '√º',
}

# Charaters to be remapped prior to source-encoding transformation
# This transformation is applied to the translation prior to being converted to the final encoding,
# and maps UTF8 to UTF8. It replaces unavailable symbols in the translation to a close
# representation in the source encoding.
# sources
# https://en.wikipedia.org/wiki/Czech_orthography
# https://en.wikipedia.org/wiki/German_orthography
# https://en.wikipedia.org/wiki/French_orthography
# https://en.wikipedia.org/wiki/Spanish_orthography
# https://en.wikipedia.org/wiki/Italian_orthography
# https://en.wikipedia.org/wiki/Polish_alphabet
# https://en.wikipedia.org/wiki/Dutch_orthography
# https://en.wikipedia.org/wiki/Romanian_alphabet
# https://en.wikipedia.org/wiki/Hungarian_alphabet
# https://en.wikipedia.org/wiki/Gaj%27s_Latin_alphabet
# https://en.wikipedia.org/wiki/Slovak_orthography
# https://en.wikipedia.org/wiki/Swedish_alphabet
# https://en.wikipedia.org/wiki/Norwegian_orthography

TRANS_CHARS = {
    '√°': 'a', #cz,fr,es,hu,sk
    '√Å': 'A', #cz,fr,hu,sk
    '√†': 'a', #fr,it
    '√Ä': 'A', #fr,it
    '√¢': 'a', #fr,ro
    '√Ç': 'A', #ro
    '√Ñ': '√§', #de,sv,no,sk
    '√•': 'a', #sv,no
    '√Ö': 'A', #sv,no
    '√¶': '√§', #sv,no
    'ƒÖ': 'a', #pl
    'ƒÑ': 'A', #pl
    'ƒÉ': 'a', #ro
    'ƒÇ': 'A', #ro
    'ƒá': 'c', #pl,hr
    'ƒÜ': 'C', #pl,hr
    '√ß': 'c', #fr,nl
    'ƒç': 'c', #cz,hr,sk
    'ƒå': 'C', #cz,hr,sk
    'ƒè': 'd', #cz,sk
    'ƒé': 'D', #cz,sk
    'ƒë': 'd', #hr
    'ƒê': 'D', #hr
    '√©': 'e', #cz,fr,es,it,nl,hu,sk
    '√â': 'E', #cz,fr,it,hu,sk
    '√®': 'e', #fr,it,nl
    '√à': 'E', #fr,it
    '√™': 'e', #fr,nl
    'ƒõ': 'e', #cz
    '√´': 'e', #fr
    'ƒö': 'E', #cz
    'ƒô': 'e', #pl
    'ƒò': 'E', #pl
    '√≠': 'i', #cz,es,it,sk
    '√ç': 'I', #cz,it,sk
    '√Æ': 'i', #fr,ro
    '√é': 'I', #ro
    'ƒ∫': 'l', #sk
    'ƒπ': 'L', #sk
    '≈Ç': 'l', #pl
    '≈Å': 'L', #pl
    'ƒæ': 'l', #sk
    'ƒΩ': 'L', #sk
    '≈Ñ': 'n', #pl
    '≈É': 'N', #pl
    '≈à': 'n', #cz,sk
    '≈á': 'N', #cz,sk
    '√±': 'n', #es,nl
    '√≥': 'o', #cz,es,pl,hu,sk
    '√ì': 'O', #cz,pl,hu,sk
    '√≤': 'o', #it
    '√í': 'O', #it
    '√¥': 'o', #fr,nl,sk
    '√î': 'O', #sk
    '≈ì': 'o', #fr
    '√∏': '√∂', #sv,no
    '√ò': '√∂', #sv,no
    '√ñ': '√∂', #de,sv,no,hu
    '≈ë': 'o', #hu
    '≈ê': 'O', #hu
    '≈ï': 'r', #sk
    '≈î': 'R', #sk
    '≈ô': 'r', #cz
    '≈ò': 'R', #cz
    '≈õ': 's', #pl
    '≈ö': 's', #pl
    '≈°': 's', #cz,hr,sk
    '≈†': 'S', #cz,hr,sk
    '»ô': 's', #ro
    '»ò': 'S', #ro
    '√ü': 'ss',#de
    '≈•': 't', #cz,sk
    '≈§': 'T', #cz,sk
    '»õ': 't', #ro
    '»ö': 'T', #ro
    '√∫': 'u', #cz,es,hu,sk
    '√ö': 'U', #cz,hu,sk
    '√π': 'u', #it
    '√ô': 'U', #it
    '√ª': 'u', #fr
    '√ú': '√º', #de,hu
    '≈Ø': 'u', #cz
    '≈Æ': 'U', #cz
    '≈±': 'u', #hu
    '≈∞': 'U', #hu
    '√Ω': 'y', #cz,sk
    '√ù': 'Y', #cz,sk
    '√ø': 'y', #fr
    '≈∫': 'z', #pl
    '≈π': 'Z', #pl
    '≈æ': 'z', #cz,hr,sk
    '≈Ω': 'z', #cz,hr,sk
    '≈º': 'z', #pl
    '≈ª': 'Z', #pl
    '¬ø': '', #es
    '¬°': '', #es
}


def _character_check(buf, valid_chars):
    for c in buf:
        if (not c.isascii() or not c.isprintable()) and c not in valid_chars:
            return c
    return None

def source_check(buf):
    valid_chars = set(CUSTOM_CHARS.values())
    valid_chars.add('\n')
    return _character_check(buf, valid_chars)

def translation_check(buf):
    valid_chars = set(CUSTOM_CHARS.keys())
    valid_chars.add('\n')
    return _character_check(buf, valid_chars)


def source_to_unicode(buf):
    for src, dst in CUSTOM_CHARS.items():
        buf = buf.replace(src, dst)
    return buf

def trans_replace(buf):
    for src, dst in TRANS_CHARS.items():
        buf = buf.replace(src, dst)
    return buf

def unicode_to_source(buf):
    buf = trans_replace(buf)
    for dst, src in CUSTOM_CHARS.items():
        buf = buf.replace(src, dst)
    return buf
